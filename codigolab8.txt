/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdint.h>
#include <string.h>
#include <stdio.h>

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
typedef enum {
  ST_LOCKED = 0,
  ST_SEM_R,
  ST_SEM_Y,
  ST_SEM_G,
  ST_PLAY,
  ST_WIN
} GameState;

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define DEBOUNCE_MS   120u
#define SEM_MS        1000u
#define MAX_VALUE     4u
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */

volatile GameState g_state = ST_LOCKED;
volatile uint32_t  g_t0 = 0;
static volatile uint8_t rx_byte = 0;
volatile uint8_t start_cmd_received = 0;

volatile uint8_t  p1_value = 0;
volatile uint8_t  p2_value = 0;
volatile uint8_t  ev_p1_inc = 0;
volatile uint8_t  ev_p2_inc = 0;

volatile uint32_t last_irq_btn1 = 0;
volatile uint32_t last_irq_btn2 = 0;



/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);

/* USER CODE BEGIN PFP */
static void UART_Log(const char *s);
static void FSM_Run(void);


static void Sem_AllOff(void);
static void Sem_R(void);
static void Sem_Y(void);
static void Sem_G(void);


static void P1_Update(uint8_t val);
static void P2_Update(uint8_t val);


static void Reset_Game_Outputs(void);



/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//FUNCIONES


static void UART_Log(const char *s) {
  if (!s) return;
  HAL_UART_Transmit(&huart2, (uint8_t*)s, (uint16_t)strlen(s), 20);
}

static void Sem_AllOff(void){
  HAL_GPIO_WritePin(GPIOC, LED4_Pin, GPIO_PIN_RESET);   // Rojo (PC7)
  HAL_GPIO_WritePin(GPIOA, LED2_Pin, GPIO_PIN_RESET);   // Amarillo (PA9)
  HAL_GPIO_WritePin(GPIOA, LD2_Pin , GPIO_PIN_RESET);   // Verde (PA5)
}
static void Sem_R(void){
  HAL_GPIO_WritePin(GPIOC, LED4_Pin, GPIO_PIN_SET);
  HAL_GPIO_WritePin(GPIOA, LED2_Pin, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(GPIOA, LD2_Pin , GPIO_PIN_RESET);
}
static void Sem_Y(void){
  HAL_GPIO_WritePin(GPIOC, LED4_Pin, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(GPIOA, LED2_Pin, GPIO_PIN_SET);
  HAL_GPIO_WritePin(GPIOA, LD2_Pin , GPIO_PIN_RESET);
}
static void Sem_G(void){
  HAL_GPIO_WritePin(GPIOC, LED4_Pin, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(GPIOA, LED2_Pin, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(GPIOA, LD2_Pin , GPIO_PIN_SET);
}


static void P1_AllOff(void){
  HAL_GPIO_WritePin(GPIOB, LED5_Pin|LED6_Pin|LED7_Pin|LED8_Pin, GPIO_PIN_RESET);
}
static void P1_Update(uint8_t val){
  P1_AllOff();
  switch(val){
    case 1: HAL_GPIO_WritePin(GPIOB, LED5_Pin, GPIO_PIN_SET); break;
    case 2: HAL_GPIO_WritePin(GPIOB, LED6_Pin, GPIO_PIN_SET); break;
    case 3: HAL_GPIO_WritePin(GPIOB, LED7_Pin, GPIO_PIN_SET); break;
    case 4: HAL_GPIO_WritePin(GPIOB, LED8_Pin, GPIO_PIN_SET); break;
    default: break; // 0 => todos apagados
  }
}


static void P2_AllOff(void){
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,           GPIO_PIN_RESET);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,           GPIO_PIN_RESET);
}
static void P2_Update(uint8_t val){
  P2_AllOff();
  switch(val){
    case 1: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET); break; // PC0
    case 2: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET); break; // PC1
    case 3: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); break; // PA4
    case 4: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); break; // PB0
    default: break;
  }
}

static void Reset_Game_Outputs(void){
  Sem_AllOff();
  p1_value = 0; p2_value = 0;
  P1_Update(p1_value);
  P2_Update(p2_value);
}

static void FSM_Run(void)
{
  const uint32_t now = HAL_GetTick();

  switch(g_state)
  {
    case ST_LOCKED:
      if (start_cmd_received){
        start_cmd_received = 0;
        Sem_R(); g_t0 = now; g_state = ST_SEM_R;
        UART_Log("[FSM] START -> SEM_R\r\n");
      }
      break;

    case ST_SEM_R:
      if ((now - g_t0) >= SEM_MS){ Sem_Y(); g_t0 = now; g_state = ST_SEM_Y; UART_Log("[FSM] SEM_R -> SEM_Y\r\n"); }
      break;

    case ST_SEM_Y:
      if ((now - g_t0) >= SEM_MS){ Sem_G(); g_t0 = now; g_state = ST_SEM_G; UART_Log("[FSM] SEM_Y -> SEM_G\r\n"); }
      break;

    case ST_SEM_G:
      if ((now - g_t0) >= SEM_MS){
        Sem_AllOff();
        g_state = ST_PLAY;
        UART_Log("[FSM] SEM_G -> PLAY\r\n");
      }
      break;

    case ST_PLAY:
      // Eventos de botones (con anti-rebote)
      if (ev_p1_inc){ ev_p1_inc = 0;
        if (p1_value < MAX_VALUE){ p1_value++; P1_Update(p1_value); }
      }
      if (ev_p2_inc){ ev_p2_inc = 0;
        if (p2_value < MAX_VALUE){ p2_value++; P2_Update(p2_value); }
      }

      // ¿Ganó alguien?
      if (p1_value == MAX_VALUE || p2_value == MAX_VALUE){
        char buf[64];
        if (p1_value == MAX_VALUE && p2_value == MAX_VALUE){
          snprintf(buf, sizeof(buf), "[WIN] Empate\r\n");
        } else if (p1_value == MAX_VALUE){
          snprintf(buf, sizeof(buf), "[WIN] Jugador 1\r\n");
        } else {
          snprintf(buf, sizeof(buf), "[WIN] Jugador 2\r\n");
        }
        HAL_UART_Transmit(&huart2, (uint8_t*)buf, (uint16_t)strlen(buf), 20);
        g_state = ST_WIN;
        // “Congelar” salidas en la posición final (no se apagan)
      }
      break;

    case ST_WIN:
      // Ignorar botones. Solo re-iniciar con un nuevo 'S'
      if (start_cmd_received){
        start_cmd_received = 0;
        Reset_Game_Outputs();
        Sem_R(); g_t0 = now; g_state = ST_SEM_R;
        UART_Log("[FSM] RESTART -> SEM_R\r\n");
      }
      break;

    default:
      g_state = ST_LOCKED;
      break;
  }
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  if (huart->Instance == USART2){
    uint8_t c = rx_byte;
    HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_byte, 1); // rearmar
    if (c=='S' || c=='s') { start_cmd_received = 1; UART_Log("[UART] 'S'\r\n"); }
  }
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  uint32_t now = HAL_GetTick();
  if (g_state != ST_PLAY) return; // botones sólo durante PLAY

  if (GPIO_Pin == BTN1_Pin){
    if ((now - last_irq_btn1) > DEBOUNCE_MS){ last_irq_btn1 = now; if (p1_value < MAX_VALUE) ev_p1_inc = 1; }
  }
  if (GPIO_Pin == BTN2_Pin){
    if ((now - last_irq_btn2) > DEBOUNCE_MS){ last_irq_btn2 = now; if (p2_value < MAX_VALUE) ev_p2_inc = 1; }
  }
}



/* USER CODE END 0 */



/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  HAL_Init();
  SystemClock_Config();

  MX_GPIO_Init();
  MX_USART2_UART_Init();

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  /* USER CODE BEGIN 2 */
  Reset_Game_Outputs();
   HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_byte, 1);
   UART_Log("\r\n[BOOT] Carrera lista. Envia 'S' por UART.\r\n");
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	 FSM_Run();


  }


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|LED4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin|LED2_Pin|GPIO_PIN_13, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LED7_Pin|LED6_Pin|LED5_Pin
                          |GPIO_PIN_7|LED8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PC0 PC1 LED4_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|LED4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PA4 LD2_Pin LED2_Pin PA13 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin|LED2_Pin|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : BTN1_Pin BTN2_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PB0 LED7_Pin LED6_Pin LED5_Pin
                           PB7 LED8_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LED7_Pin|LED6_Pin|LED5_Pin
                          |GPIO_PIN_7|LED8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */





/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {


  }
  /* USER CODE END Error_Handler_Debug */
}
#ifdef USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
